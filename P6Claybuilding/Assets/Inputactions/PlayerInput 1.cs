//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.12.0
//     from Assets/Inputactions/PlayerInput 1.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Inputactions/PlayerInput 1.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @XRbutton: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @XRbutton()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput 1"",
    ""maps"": [
        {
            ""name"": ""Maptoggle"",
            ""id"": ""2f3eb0eb-9ec1-43f7-80f3-10747e17fc82"",
            ""actions"": [
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""222cbb9f-40e6-42bc-a710-38933a9a09a9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7181944f-3ad7-48a0-936b-f87fa8908c1a"",
                    ""path"": ""<XRController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""XRcontrols"",
            ""id"": ""536c7b44-a66f-4d55-8518-ccfec8282933"",
            ""actions"": [
                {
                    ""name"": ""Select button"",
                    ""type"": ""Button"",
                    ""id"": ""ba112abd-0a28-4859-ad3e-496fc520e94d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7a5c2648-db57-4d72-955e-deca2888f757"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryTrigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftSet"",
            ""id"": ""a820cfbf-49f7-4825-9d4f-203fe4b06d95"",
            ""actions"": [
                {
                    ""name"": ""Set"",
                    ""type"": ""Button"",
                    ""id"": ""02549e21-42fe-4612-b3d6-33cebb9c600d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ed39659-9563-477a-93ef-33f2379b213d"",
                    ""path"": ""<XRController>{LeftHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Set"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""LeftDelete"",
            ""id"": ""6258f582-b1a5-4677-a487-98367463260d"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""8cf19d50-c9c9-4dcf-b4a1-6ed5952d089f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""baa87289-4c93-4f40-9165-4016250bd780"",
                    ""path"": ""<XRController>{LeftHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SelectWall"",
            ""id"": ""e683e6e6-b172-4e89-a258-e848aa49cf06"",
            ""actions"": [
                {
                    ""name"": ""WallSelection"",
                    ""type"": ""Button"",
                    ""id"": ""062871a4-57a3-4077-92d1-dc1e6b000049"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63a29c89-2319-4ddf-a345-746814b57123"",
                    ""path"": ""<XRController>{LeftHand}/{TriggerButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WallSelection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Maptoggle
        m_Maptoggle = asset.FindActionMap("Maptoggle", throwIfNotFound: true);
        m_Maptoggle_B = m_Maptoggle.FindAction("B", throwIfNotFound: true);
        // XRcontrols
        m_XRcontrols = asset.FindActionMap("XRcontrols", throwIfNotFound: true);
        m_XRcontrols_Selectbutton = m_XRcontrols.FindAction("Select button", throwIfNotFound: true);
        // LeftSet
        m_LeftSet = asset.FindActionMap("LeftSet", throwIfNotFound: true);
        m_LeftSet_Set = m_LeftSet.FindAction("Set", throwIfNotFound: true);
        // LeftDelete
        m_LeftDelete = asset.FindActionMap("LeftDelete", throwIfNotFound: true);
        m_LeftDelete_Newaction = m_LeftDelete.FindAction("New action", throwIfNotFound: true);
        // SelectWall
        m_SelectWall = asset.FindActionMap("SelectWall", throwIfNotFound: true);
        m_SelectWall_WallSelection = m_SelectWall.FindAction("WallSelection", throwIfNotFound: true);
    }

    ~@XRbutton()
    {
        UnityEngine.Debug.Assert(!m_Maptoggle.enabled, "This will cause a leak and performance issues, XRbutton.Maptoggle.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_XRcontrols.enabled, "This will cause a leak and performance issues, XRbutton.XRcontrols.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LeftSet.enabled, "This will cause a leak and performance issues, XRbutton.LeftSet.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_LeftDelete.enabled, "This will cause a leak and performance issues, XRbutton.LeftDelete.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_SelectWall.enabled, "This will cause a leak and performance issues, XRbutton.SelectWall.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Maptoggle
    private readonly InputActionMap m_Maptoggle;
    private List<IMaptoggleActions> m_MaptoggleActionsCallbackInterfaces = new List<IMaptoggleActions>();
    private readonly InputAction m_Maptoggle_B;
    /// <summary>
    /// Provides access to input actions defined in input action map "Maptoggle".
    /// </summary>
    public struct MaptoggleActions
    {
        private @XRbutton m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public MaptoggleActions(@XRbutton wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Maptoggle/B".
        /// </summary>
        public InputAction @B => m_Wrapper.m_Maptoggle_B;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Maptoggle; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="MaptoggleActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(MaptoggleActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="MaptoggleActions" />
        public void AddCallbacks(IMaptoggleActions instance)
        {
            if (instance == null || m_Wrapper.m_MaptoggleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MaptoggleActionsCallbackInterfaces.Add(instance);
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="MaptoggleActions" />
        private void UnregisterCallbacks(IMaptoggleActions instance)
        {
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="MaptoggleActions.UnregisterCallbacks(IMaptoggleActions)" />.
        /// </summary>
        /// <seealso cref="MaptoggleActions.UnregisterCallbacks(IMaptoggleActions)" />
        public void RemoveCallbacks(IMaptoggleActions instance)
        {
            if (m_Wrapper.m_MaptoggleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="MaptoggleActions.AddCallbacks(IMaptoggleActions)" />
        /// <seealso cref="MaptoggleActions.RemoveCallbacks(IMaptoggleActions)" />
        /// <seealso cref="MaptoggleActions.UnregisterCallbacks(IMaptoggleActions)" />
        public void SetCallbacks(IMaptoggleActions instance)
        {
            foreach (var item in m_Wrapper.m_MaptoggleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MaptoggleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="MaptoggleActions" /> instance referencing this action map.
    /// </summary>
    public MaptoggleActions @Maptoggle => new MaptoggleActions(this);

    // XRcontrols
    private readonly InputActionMap m_XRcontrols;
    private List<IXRcontrolsActions> m_XRcontrolsActionsCallbackInterfaces = new List<IXRcontrolsActions>();
    private readonly InputAction m_XRcontrols_Selectbutton;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRcontrols".
    /// </summary>
    public struct XRcontrolsActions
    {
        private @XRbutton m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRcontrolsActions(@XRbutton wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRcontrols/Selectbutton".
        /// </summary>
        public InputAction @Selectbutton => m_Wrapper.m_XRcontrols_Selectbutton;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRcontrols; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRcontrolsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRcontrolsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRcontrolsActions" />
        public void AddCallbacks(IXRcontrolsActions instance)
        {
            if (instance == null || m_Wrapper.m_XRcontrolsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRcontrolsActionsCallbackInterfaces.Add(instance);
            @Selectbutton.started += instance.OnSelectbutton;
            @Selectbutton.performed += instance.OnSelectbutton;
            @Selectbutton.canceled += instance.OnSelectbutton;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRcontrolsActions" />
        private void UnregisterCallbacks(IXRcontrolsActions instance)
        {
            @Selectbutton.started -= instance.OnSelectbutton;
            @Selectbutton.performed -= instance.OnSelectbutton;
            @Selectbutton.canceled -= instance.OnSelectbutton;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRcontrolsActions.UnregisterCallbacks(IXRcontrolsActions)" />.
        /// </summary>
        /// <seealso cref="XRcontrolsActions.UnregisterCallbacks(IXRcontrolsActions)" />
        public void RemoveCallbacks(IXRcontrolsActions instance)
        {
            if (m_Wrapper.m_XRcontrolsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRcontrolsActions.AddCallbacks(IXRcontrolsActions)" />
        /// <seealso cref="XRcontrolsActions.RemoveCallbacks(IXRcontrolsActions)" />
        /// <seealso cref="XRcontrolsActions.UnregisterCallbacks(IXRcontrolsActions)" />
        public void SetCallbacks(IXRcontrolsActions instance)
        {
            foreach (var item in m_Wrapper.m_XRcontrolsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRcontrolsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRcontrolsActions" /> instance referencing this action map.
    /// </summary>
    public XRcontrolsActions @XRcontrols => new XRcontrolsActions(this);

    // LeftSet
    private readonly InputActionMap m_LeftSet;
    private List<ILeftSetActions> m_LeftSetActionsCallbackInterfaces = new List<ILeftSetActions>();
    private readonly InputAction m_LeftSet_Set;
    /// <summary>
    /// Provides access to input actions defined in input action map "LeftSet".
    /// </summary>
    public struct LeftSetActions
    {
        private @XRbutton m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LeftSetActions(@XRbutton wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "LeftSet/Set".
        /// </summary>
        public InputAction @Set => m_Wrapper.m_LeftSet_Set;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_LeftSet; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LeftSetActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LeftSetActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LeftSetActions" />
        public void AddCallbacks(ILeftSetActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftSetActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftSetActionsCallbackInterfaces.Add(instance);
            @Set.started += instance.OnSet;
            @Set.performed += instance.OnSet;
            @Set.canceled += instance.OnSet;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LeftSetActions" />
        private void UnregisterCallbacks(ILeftSetActions instance)
        {
            @Set.started -= instance.OnSet;
            @Set.performed -= instance.OnSet;
            @Set.canceled -= instance.OnSet;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LeftSetActions.UnregisterCallbacks(ILeftSetActions)" />.
        /// </summary>
        /// <seealso cref="LeftSetActions.UnregisterCallbacks(ILeftSetActions)" />
        public void RemoveCallbacks(ILeftSetActions instance)
        {
            if (m_Wrapper.m_LeftSetActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LeftSetActions.AddCallbacks(ILeftSetActions)" />
        /// <seealso cref="LeftSetActions.RemoveCallbacks(ILeftSetActions)" />
        /// <seealso cref="LeftSetActions.UnregisterCallbacks(ILeftSetActions)" />
        public void SetCallbacks(ILeftSetActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftSetActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftSetActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LeftSetActions" /> instance referencing this action map.
    /// </summary>
    public LeftSetActions @LeftSet => new LeftSetActions(this);

    // LeftDelete
    private readonly InputActionMap m_LeftDelete;
    private List<ILeftDeleteActions> m_LeftDeleteActionsCallbackInterfaces = new List<ILeftDeleteActions>();
    private readonly InputAction m_LeftDelete_Newaction;
    /// <summary>
    /// Provides access to input actions defined in input action map "LeftDelete".
    /// </summary>
    public struct LeftDeleteActions
    {
        private @XRbutton m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public LeftDeleteActions(@XRbutton wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "LeftDelete/Newaction".
        /// </summary>
        public InputAction @Newaction => m_Wrapper.m_LeftDelete_Newaction;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_LeftDelete; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="LeftDeleteActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(LeftDeleteActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="LeftDeleteActions" />
        public void AddCallbacks(ILeftDeleteActions instance)
        {
            if (instance == null || m_Wrapper.m_LeftDeleteActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LeftDeleteActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="LeftDeleteActions" />
        private void UnregisterCallbacks(ILeftDeleteActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="LeftDeleteActions.UnregisterCallbacks(ILeftDeleteActions)" />.
        /// </summary>
        /// <seealso cref="LeftDeleteActions.UnregisterCallbacks(ILeftDeleteActions)" />
        public void RemoveCallbacks(ILeftDeleteActions instance)
        {
            if (m_Wrapper.m_LeftDeleteActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="LeftDeleteActions.AddCallbacks(ILeftDeleteActions)" />
        /// <seealso cref="LeftDeleteActions.RemoveCallbacks(ILeftDeleteActions)" />
        /// <seealso cref="LeftDeleteActions.UnregisterCallbacks(ILeftDeleteActions)" />
        public void SetCallbacks(ILeftDeleteActions instance)
        {
            foreach (var item in m_Wrapper.m_LeftDeleteActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LeftDeleteActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="LeftDeleteActions" /> instance referencing this action map.
    /// </summary>
    public LeftDeleteActions @LeftDelete => new LeftDeleteActions(this);

    // SelectWall
    private readonly InputActionMap m_SelectWall;
    private List<ISelectWallActions> m_SelectWallActionsCallbackInterfaces = new List<ISelectWallActions>();
    private readonly InputAction m_SelectWall_WallSelection;
    /// <summary>
    /// Provides access to input actions defined in input action map "SelectWall".
    /// </summary>
    public struct SelectWallActions
    {
        private @XRbutton m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public SelectWallActions(@XRbutton wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "SelectWall/WallSelection".
        /// </summary>
        public InputAction @WallSelection => m_Wrapper.m_SelectWall_WallSelection;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_SelectWall; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="SelectWallActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(SelectWallActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="SelectWallActions" />
        public void AddCallbacks(ISelectWallActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectWallActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectWallActionsCallbackInterfaces.Add(instance);
            @WallSelection.started += instance.OnWallSelection;
            @WallSelection.performed += instance.OnWallSelection;
            @WallSelection.canceled += instance.OnWallSelection;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="SelectWallActions" />
        private void UnregisterCallbacks(ISelectWallActions instance)
        {
            @WallSelection.started -= instance.OnWallSelection;
            @WallSelection.performed -= instance.OnWallSelection;
            @WallSelection.canceled -= instance.OnWallSelection;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SelectWallActions.UnregisterCallbacks(ISelectWallActions)" />.
        /// </summary>
        /// <seealso cref="SelectWallActions.UnregisterCallbacks(ISelectWallActions)" />
        public void RemoveCallbacks(ISelectWallActions instance)
        {
            if (m_Wrapper.m_SelectWallActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="SelectWallActions.AddCallbacks(ISelectWallActions)" />
        /// <seealso cref="SelectWallActions.RemoveCallbacks(ISelectWallActions)" />
        /// <seealso cref="SelectWallActions.UnregisterCallbacks(ISelectWallActions)" />
        public void SetCallbacks(ISelectWallActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectWallActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectWallActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="SelectWallActions" /> instance referencing this action map.
    /// </summary>
    public SelectWallActions @SelectWall => new SelectWallActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Maptoggle" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="MaptoggleActions.AddCallbacks(IMaptoggleActions)" />
    /// <seealso cref="MaptoggleActions.RemoveCallbacks(IMaptoggleActions)" />
    public interface IMaptoggleActions
    {
        /// <summary>
        /// Method invoked when associated input action "B" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnB(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRcontrols" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRcontrolsActions.AddCallbacks(IXRcontrolsActions)" />
    /// <seealso cref="XRcontrolsActions.RemoveCallbacks(IXRcontrolsActions)" />
    public interface IXRcontrolsActions
    {
        /// <summary>
        /// Method invoked when associated input action "Select button" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectbutton(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "LeftSet" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LeftSetActions.AddCallbacks(ILeftSetActions)" />
    /// <seealso cref="LeftSetActions.RemoveCallbacks(ILeftSetActions)" />
    public interface ILeftSetActions
    {
        /// <summary>
        /// Method invoked when associated input action "Set" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSet(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "LeftDelete" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="LeftDeleteActions.AddCallbacks(ILeftDeleteActions)" />
    /// <seealso cref="LeftDeleteActions.RemoveCallbacks(ILeftDeleteActions)" />
    public interface ILeftDeleteActions
    {
        /// <summary>
        /// Method invoked when associated input action "New action" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnNewaction(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SelectWall" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="SelectWallActions.AddCallbacks(ISelectWallActions)" />
    /// <seealso cref="SelectWallActions.RemoveCallbacks(ISelectWallActions)" />
    public interface ISelectWallActions
    {
        /// <summary>
        /// Method invoked when associated input action "WallSelection" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnWallSelection(InputAction.CallbackContext context);
    }
}
